<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

<link rel="stylesheet" href="https://code.jquery.com/ui/1.14.1/themes/base/jquery-ui.css">   
<script src="https://code.jquery.com/jquery-3.7.1.js" integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/ui/1.14.1/jquery-ui.js"></script> 

<% String googleKey = "AIzaSyBO292cTbolXbrl7Q_mRicCmyHObBb-AUA"; %>
<script async
	src="https://maps.googleapis.com/maps/api/js?key=<%=googleKey%>&callback=initMap&loading=async">
</script>
<script>
	const contextPath = "${pageContext.request.contextPath}";
</script>
<script>
//명소 번호 부여 -------------------------------------------------------------------
	function reorderAllPlaces() {
 		const NumColor = ["number-green", "number-blue", "number-pink", "number-orange"];
	
		$(".day-column").each(function (dayIdx) {
			const colorClass = NumColor[dayIdx % NumColor.length]; // 일차별로 색상 결정
	
			$(this).find(".place").each(function (placeIdx) {
				const numberVal = placeIdx + 1;
				const numberElem = $(this).find(".place-number");
	
				numberElem
					.removeClass("number-green number-blue number-pink number-orange")
					.addClass(colorClass)
					.text(numberVal);
			});
		});
	}
 	$(document).ready(function() {
 		reorderAllPlaces();
 	});
	
// 플래너 제목 수정 -----------------------------------------------------------------
	function updatePlannerTitle() {
		let plannerIdx = $(".title-wrapper").attr("data-planner-idx");
		let title = $(".title").val().trim();

		if(!title) { alert("제목을 입력해주세요."); return; }
		
		const json_data = {
				plannerIdx : plannerIdx,
				title : title
		}
		const init = {
				method: "post",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify(json_data)
		};
		fetch("updateTitle", init)
		.then(response => response.text())
		.then(result => {
			if(result.trim() === "success") {
				$(".update-title").attr("placeholder", title);
				alert("플래너 제목이 수정되었습니다.");
			} else { alert("제목 수정 실패! 다시 시도해주세요."); }
		})
		.catch(error => { alert("에러! : " + error); });
	}
	const plannerIdx = ${pDto.plannerIdx};
	
 	$(function() {
// 플래너 리스트 --------------------------------------------------------------------------------
		$(".update-title").attr("placeholder", "${pDto.title}");
		$(".day").text("${pDto.startDate} ~ ${pDto.endDate}");
		$(".profile").attr("src", "${pageContext.request.contextPath}/resources/img/${pDto.profile}");
		$("#planner-nickname").text("${pDto.nickname}");
		
// 플래너 제목 수정 후 누르는 버튼 ------------------------------------------------------------------
		$('.update-title').click(function() {
			updatePlannerTitle();
		});
		
// 동행인 초대 팝업창 ----------------------------------------------------------------------------
		$('#add-partner-popup').click(function() {
			$("#email-main").css("display", "block");
			$('#bg-screen').css("display", "block");
		});

// 플래너 수정 완료 -----------------------------------------------------------------------------
		$(".place-box").sortable({
			stop: function(event, ui) {
				let day = $(this).attr("day");
				let number_order = 1;
				$(".place-box[day='"+day+"'] > .place").each(function(idx, item) {
					$(item).find("div").eq(0).find("div").eq(0).text(number_order++);
				});

				$(".place-box[day='"+day+"'] > .place").each(function(idx, item) {
					let new_order = parseInt($(item).find("div").eq(0).find("div").eq(0).text());
		            let place_idx = $(item).attr("place-idx");
					
					fetch(contextPath + "/updateUserPlaceDayIdx", {
						method: "post",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify({
							plannerIdx: plannerIdx,
				            userPlaceIdx: place_idx,
				            dayIdx: parseInt(day),
				            saveIdx: new_order
				        })
					})
					.then(res => res.text())
					.then(data => {
						if(data.trim() !== "success") {
							alert("명소 순서 변경 실패: place_idx " + place_idx);
						}
					})
					.catch(err => {
						alert("명소 순서 변경 중 오류 발생: " + err);
					});
				});
			}
		});
		
// 일차별 통째로 다른 날짜로 변경 ---------------------------------------------------------------------
		$("#two-left").sortable({
			items: "[data-day-idx]",
			handle: ".day-box",
			stop: function() {
				let newDay = 1;
				$("#two-left").children("[data-day-idx]").each(function() {
					$(this).attr("data-day-idx", newDay);
					$(this).find(".place-box").attr("day", newDay);
					$(this).find(".day-title").text(newDay + "일차");
					$(this).find(".place-box").each(function() {
						$(this).attr("day", newDay);	
					});
					newDay++;
				});
				console.log("일차 순서 변경 완료");
			}
		});
		
// 일차마다 안에 있는 명소 끼리 순서 변경 ------------------------------------------------------------------------
		$(function () {
	    $(".place-list").sortable({
	        connectWith: ".place-list", // 일차 간 이동 가능
	        items: ".place",
	        handle: ".place-box",
	        cancel: ".selete-option, .menu-list, button",
	        placeholder: "place-placeholder",
	        update: function (event, ui) {
	            const movedElement = ui.item;
	            const userPlaceIdx = movedElement.data("user-place-idx");
	
	            const newDayColumn = movedElement.closest(".day-column");
	            const newDayIdx = newDayColumn.data("day-idx");
	
	            const newSaveIdx = movedElement.index() + 1;
	            updateUserPlace(userPlaceIdx, newDayIdx, newSaveIdx);
	        }
	    })
	    .disableSelection();
	});

	function updateUserPlace(userPlaceIdx, newDayIdx, newSaveIdx) {
	    const placeMove = {
	        userPlaceIdx: userPlaceIdx,
	        dayIdx: newDayIdx,
	        saveIdx: newSaveIdx
	    };
	
	    fetch(contextPath + "/planner/updateUserPlaceDayIdx", {
	        method: "POST",
	        headers: { "Content-Type": "application/json" },
	        body: JSON.stringify(placeMove)
	    })
	    .then(response => {
	        if (!response.ok) {
	            throw new Error("서버 오류: " + response.status);
	        }
	        return response.text();
	    })
	    .then(result => {
	        if (result === "success") {
	            console.log("일정 위치 변경 성공");
	        } else {
	            alert("변경 실패: " + result);
	        }
	    })
	    .catch(error => {
	        console.error("에러:", error);
	        alert("에러 발생: " + error.message);
	    });
	}

		
// 플래너 화면 나가기 ------------------------------------------------------------------------------
		$(".out-btn").click(function() {
			if(confirm("플래너 화면을 나가시겠습니까?")) {
				let dayOrderList = [];
				
				$("#two-left").children("[data-day-idx]").each(function(index) {
					let dayIdx = $(this).attr("data-day-idx");
					let daySaveIdx = index + 1;
					
					dayOrderList.push({
						oldDayIdx: dayIdx,
					    newDayIdx: daySaveIdx
					});
				});
				
				fetch(contextPath + "/planner/updateDayIdxByOldDayIdx", {
				    method: "post",
				    headers: { "Content-Type": "application/json" },
				    body: JSON.stringify(dayOrderList)
				})
				.then(res => res.text())
				.then(data => {
					if(data.trim() === "success") {
						alert("플래너가 변경되었습니다. 홈 화면으로 이동합니다.");
						location.href = contextPath + "/home";
					} else {
						alert("플래너 저장 실패: " + data);
					}
				})
				.catch(err => {
					alert("저장 실패: ", err.message);
				});
			}
		});
	});
	
// 선택 버튼, 자가 버튼, 도보 버튼 ---------------------------------------------------------------------
	$(document).ready(function() {
		$('input[name="selected_day"]').on('change', function () {
			let selectedDayIdx = $(this).data('day-idx');
			
			$(".select-btn").css("background-color", "white");
			$(this).parent().css("background-color", "#FFFFE0");

			$(".move-button").hide();
            const move = $("#move-button" + selectedDayIdx);
            if (move.length) {
                move.show().find("input[type='radio']").prop("checked", false);
            }
            $(`.select-btn[data-day-idx="${selectedDayIdx}"]`).trigger("click");
		});
		
// 옵션창(작성 메모보기 / 일정 삭제하기) 열기
		$('.menu-list').on('click', function() {
		    $(this).closest('.place-end').next('.selete-option').toggle();
		});

 	    // 옵션창 바깥 클릭 시 닫기
		$(document).on('click', function(e) {
		    if(!$(e.target).closest('.place-end, .selete-option').length) {
		    	$('.selete-option').hide();
		    }
		});

// 메모 팝업창 열기 ----------------------------------------------------------------------------------
		$(document).on("click", ".show-memo-popup", function() {
			const place = $(this).closest(".place");
			const userPlaceIdx = place.data("userPlaceIdx");
		
			if (!userPlaceIdx) return;
		
			$("#memo").css("display", "block").data("user-place-idx", userPlaceIdx);
			$("#bg-screen").css("display", "block");
			loadMemo(userPlaceIdx);
		});
		
// 메모 팝업창 닫기 ----------------------------------------------------------------------------------
		$('.window-close').click(function() {
			$('#memo').css('display', 'none');
			$('#bg-screen').css('display', 'none');
		});
		
		$('#bg-screen').click(function() {
			$('#memo').css('display', 'none');
		    $('#bg-screen').css('display', 'none');
		});
		
// 메모 보기 ---------------------------------------------------------------------------------------		
		function loadMemo(userPlaceIdx) {
			fetch("getMemoDetailList", {
				method: "POST",
			    headers: { "Content-Type": "application/json" },
			    credentials: "include",
			    body: JSON.stringify({ userPlaceIdx })
			})
		    .then(response => response.json())
		    .then(data => {
		    	if(data && data.length > 0 && data[0].content) {
			    	$("#memo-content > textarea").val(data[0].content);
			    	$(".memo-last-user").text(`마지막으로 \${data[0].nickname}님이 수정하였습니다.`);
		    	} else {
		    		$("#memo-content > textarea").val("메모가 없습니다.");
		    	}
		    })
		    .catch(error => {
		    	alert("error");
		    	console.log("메모 불러오기 실패:", error);
		    });
		};
		
// 메모 삭제하기 -----------------------------------------------------------------------------------
		$(document).on("click", ".all-memo-del-btn", function() {
			const currentUserPlaceIdx = $("#memo").data("user-place-idx");
			
			if(!currentUserPlaceIdx) {
				alert("userPlaceIdx 값이 없습니다.");
				return;
			}
			const json_data = { userPlaceIdx: currentUserPlaceIdx };
	
			fetch("deleteMemo", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify(json_data)
			})
			.then(response => response.text())
			.then(result => {
				if (result.trim() === "success") {
					alert("메모가 삭제되었습니다.");
					$("#memo-content > textarea").val("메모가 없습니다.");
					$(".memo-last-user").empty();
					$(".memo-last-user").text("테스트 닉네임 출력 확인");
				} else if(result.trim() === "fail") {
					alert("삭제할 메모가 없습니다.");
				} else {
					alert("메모 삭제 중 오류가 발생하였습니다.");
				}
			})
			.catch(error => {
				alert("에러: " + error);
			});
		});

// 메모 작성하기 + 수정하기 ------------------------------------------------------------------------------
		$(document).on("click", ".memo-finish-btn", function() {
			const currentUserPlaceIdx = $("#memo").data("user-place-idx");
			const userIdx = '${pDto.userIdx}';
			const updateContent = $("#memo-content > textarea").val();
			if(updateContent.trim() === "") {
				alert("메모 내용을 입력해주세요."); return;
			}
			
			const json_data = {
					userPlaceIdx: currentUserPlaceIdx,
					userIdx: userIdx,
					content: updateContent
			};
			fetch("updateMemo", {
				method: "post",
				headers: { "Content-Type": "application/json" },
				credentials: "include",
				body: JSON.stringify(json_data)
			})
			.then(response => response.text())
			.then(result => {
  			    console.log("서버 응답:", result);
				const res = result.trim();
				if(res === "success") {
					alert("메모가 작성되었습니다.");
					loadMemo(currentUserPlaceIdx);
				} else if(res === "updated") {
					alert("메모가 수정되었습니다.");
					loadMemo(currentUserPlaceIdx);
				} else {
					alert("메모 저장 중 오류가 발생하였습니다.");
				}
			})
			.catch(error => {
				alert("에러: " + error);
			});
		});
		
		
// 일정 삭제하기 ----------------------------------------------------------------------------------
		$(document).on("click", ".delete-place-btn", function () {
			let place = $(this).closest(".place");
			if(!confirm("일정을 삭제하시겠습니까?")) return;
			
			let userPlaceIdx = place.data("user-place-idx");
			const json_data = { userPlaceIdx: userPlaceIdx };
			const init = {
						method: 'post',
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify(json_data)
			};
			fetch("deleteUserPlace", init)
			.then(response => {
				alert("일정이 삭제되었습니다.");
				place.remove();
			})
			.catch(error => {
				alert("에러: " + error);
			})
		});
	});
	
// 지도 표시 -----------------------------------------------------------------------------------
	let map;
	let markers = [];
	let dayPaths = {}; // 각 dayIdx 별 장소 좌표 저장
	let directionsRenderer, directionsService;
	
	// 지도 초기화
	function initMap() {
	    const center = { lat: ${cDto.lat}, lng: ${cDto.lng} };
	    map = new google.maps.Map(document.getElementById("map"), {
			zoom: 12,
			center: center
		});
	    
	    directionsService = new google.maps.DirectionsService();  // 길 찾기 계산
	    directionsRenderer = new google.maps.DirectionsRenderer({ // 화면에 계산된 경로를 선으로 표시
	    	map: map,
	    	suppressMarkers: true // 기존에 적용되는 숫자 마커 제거
	    });
	}
	
	// 마커 모두 제거
	function clearMarkers() {
		markers.forEach(m => m.setMap(null));
		markers = [];
	}
	
	// 마커 추가
	function addMarker(lat, lng, index) {
		index = parseInt(index);
		if (!Number.isInteger(index)) return;
		
		const iconIdx = index <= 10 ? index : 10;
		const icon = contextPath + "/resources/img/icon_number" + iconIdx + ".png";
		const marker = new google.maps.Marker({
			position: { lat, lng },
			map: map,
			icon: {
				url: icon,
				scaledSize: new google.maps.Size(40, 40)
			}
		});
		markers.push(marker);
		map.setCenter({ lat, lng });
	    map.setZoom(12);
	}

// 선택 버튼 눌렀을 때 지도에 마커 표시 ------------------------------------------------------------------
	function loadPlacesByDay(dayIdx) {
	    fetch("getPlacesByDayIdx", {
	        method: "post",
	        headers: { "Content-Type": "application/json" },
	        body: JSON.stringify({ dayIdx: dayIdx })
	    })
	    .then(res => res.json())
	    .then(data => {
	    	clearMarkers();
	        $("#summary").empty();
	        directionsRenderer.set("directions", null);

	        const path = [];
	        const box = $(`.day_column[data-day-idx="${dayIdx}"] .place_box`);
	        box.empty();

	        const NumColor = ["number-green", "number-blue", "number-pink", "number-orange"];

	        
	        data.forEach((place, i) => {
	            path.push({ lat: place.lat, lng: place.lng });

	            let str = `<div class="place" data-user-place-idx="${place.userPlaceIdx}" lat="${place.lat}" lng="${place.lng}">
	                            <div class="place-start"><div class="${NumColor[i % 4]}">${i + 1}</div></div>
	                            <div class="place-center"><div class="place-name">${place.name}</div></div>
	                            <div class="place-end"><img src="${contextPath}/resources/img/dot.png" class="menu-list"></div>
	                            <div class="selete-option" style="display: none;">
	                                <button class="show-memo-popup">작성 메모보기</button>
	                                <button class="delete-place-btn">일정 삭제하기</button>
	                            </div>
	                        </div>`;
	            box.append(str);
	            addMarker(place.lat, place.lng, i + 1);
	        });

	        dayPaths[dayIdx] = path;
	        reorderAllPlaces();
	    });
	}
	
// 선택 버튼 클릭 시 일정 리스트 가져오기 -------------------------------------------------------------
	$(document).on("click", ".select-btn", function() {
		const dayIdx = $(this).data("day-idx");
		
		$(".select-btn").css("background-color", "white");
		$(this).css("background-color", "#FFFFE0");
		
		$(".move-button").hide();
		/* const move = $("#move-button" + dayIdx); */
		const move = $(this).closest(".day-column").find(".move-button");
		if(move.length) {
			move.show().find("input[type='radio']").prop("checked", false);
		}
		loadPlacesByDay(dayIdx);
	});	
	
// 경로 및 소요 시간 표시 --------------------------------------------------------------------------------
	$(document).on("click", ".move-button > label[for='transportation'], .move-button > label[for='walk']", function() {
		const dayIdx = $(this).closest(".day-column").attr("data-day-idx");
		const path = dayPaths[dayIdx];
		
		if(!path || path.length < 2) { 
			alert("경로를 표시할 장소가 2개 이상이어야 합니다.");
			return; 
		}
		
		const mode = $(this).attr("for") === "walk" ? google.maps.TravelMode.WALKING : google.maps.TravelMode.DRIVING;
		
		directionsService.route({
			origin: path[0],   // 출발지
			destination: path[path.length - 1],   // 도착지
			waypoints: path.slice(1, -1).map(p => ({ location: p })),   // 경유지
			travelMode: mode   // 자가 or 도보
		}, (result, status) => {
			if (status === "OK" && result.routes && result.routes.length > 0) {
				directionsRenderer.setDirections(result);
				
				// 총 소요 시간과 총 이동 거리
				let totalDuration = 0, totalDistance = 0;
				result.routes[0].legs.forEach(leg => {     
					totalDuration += leg.duration.value;   // 전체 소요 시간 : 초 계산  
					totalDistance += leg.distance.value;   // 전체 거리 : 미터 계산 
				});
				
				const h = Math.floor(totalDuration / 3600);          // 시
				const m = Math.floor((totalDuration % 3600) / 60);   // 분
				const d = (totalDistance / 1000).toFixed(1);         // 거리
				
				$("#summary").html(`
					<strong>예상 소요 시간 : </strong>\${h}시간 \${m}분<br>
					<strong>총 거리 : </strong> \${d} km
				`);
			} else {
				alert("경로 표시 실패: " + status);
			}
		});
	});


// 이메일로 동행인 초대하기 -----------------------------------------------------------------------		
	const planner_idx = ${pDto.plannerIdx};
	
	$(function() {
    let searchedUser = null;

	    // 이메일 검색
	    $(document).on("click", ".search-icon", function() {
	        const email = $("#inviteEmail").val().trim();
	        console.log("보내는 이메일:", email);
	        if(!email) return alert("이메일을 입력해주세요");
	
	        fetch(contextPath + "/getUserByEmail", {
	            method: 'POST',
	            headers: { "Content-Type": "application/json" },
	            body: JSON.stringify({ email: email })
	        })
	        .then((response) => {
	        	if(!response.ok) {
	        		throw new Error("서버 에러:" + response.status); 
	        	}
	        	return response.json();
	        })
	        .then(data => {
	        	console.log("서버에서 받은 데이터:" , data);
	        	console.log("userIdx:" , data.userIdx);
	        	if (data.userIdx === 0) {
	        	    alert("해당 이메일로 등록된 사용자가 없습니다.");
	        	} else {
	        	    console.log("닉네임:", data.nickname);
	        	}

	        	if(!data) {
	        		console.log("데이터가 null 또는 undefined 입니다.");
	        	}
	        	if(data && data.userIdx && data.userIdx > 0) {
	                searchedUser = data;
	                let html = `<span class="profile-box" user_idx="${data.userIdx}">
	                                <img src="${contextPath}/resources/img/\${data.profile}" class="profile" />
	                                <span class="email">\${data.email}</span>
	                                <button class="email-btn">초대하기</button>
	                            </span>`;
	                $("#email-two").html(html);
	            } else {
	                searchedUser = null;
	                $("#email-two").html(`<div style="color:red;">일치하는 사용자가 없습니다.</div>`);
	                $(".email-btn").hide();
	            }
	        })
	        .catch(err => {
	            alert("검색 실패" + err.message);
	            console.error(err);
	        });
	    });
	
// 초대하기 버튼 ----------------------------------------------------------------------------------
	    $(document).on("click", ".email-btn", function() {
	    	console.log("초대하기 버튼 클릭됨!");
		    if(!searchedUser) {
		        alert("먼저 이메일을 검색하세요.");
		        return;
		    }
		    const json_data = {
		        plannerIdx: planner_idx,
		        userIdx: searchedUser.userIdx
		    };
		    console.log("보내는 데이터:", json_data);
		
		    fetch("addPartner", {
		        method: 'POST',
		        headers: { "Content-Type": "application/json" },
		        body: JSON.stringify(json_data)
		    })
		    .then(res => {
		        console.log("서버 응답 상태:", res.status);
				return res.text();
		    })
		    .then(user => {
		        alert("초대 메일이 전송되었습니다.");
		        $(".email-btn").hide();
		        $("#email-two").empty();
		        $("#inviteEmail").val("");
		
		        const str = `<div class="profileList" planner-idx="${planner-idx}" user-idx="${user.userIdx}">
		                        <img src="${contextPath}/resources/img/profile/${user.profile}" class="partner-profile" />
		                        <span class="nickname">${user.nickname}</span>
		                        <span class="delete"><button class="partner-delete-btn">삭제</button></span>
		                    </div>`;
		        $("#partner-Profile-list").append(str);
		    })
		    .catch(err => {
		        alert(err.message);
		        console.log(err);
		    });
		});

		// 동행인 초대 팝업창 닫기
		$(document).on("click", ".email-window-close", function() {
			$('#email-main').css('display', 'none');
			$('#bg-screen').css('display', 'none');
		});
		
		// 동행인 리스트 팝업창 열기
		$('#planner-nickname').click(function() {
			$('#plannerPartner-main').css('display', 'block');
			$('#bg-screen').css('display', 'block');
			loadPartnerList();
		});
		
		// 동행인 리스트 팝업창 닫기
		$(document).on("click", ".partner-window-close", function() {
			$('#plannerPartner-main').css('display', 'none');
			$('#bg-screen').css('display', 'none');
		});
		
		// 동행인 삭제하기
		$(document).on("click", ".partner-delete-btn", function() {
			deletePartner($(this));
		});
		 
// 동행인 목록 불러오기 ----------------------------------------------------------------------------------
		function loadPartnerList() {
			const plannerIdx = ${pDto.plannerIdx};
			fetch("getPartnerList", {
				method: 'post',
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ plannerIdx })
			})
			.then(res => res.json())
			.then(data => {
				$("#partner-Profile-list").empty();
				for(let i=0; i<data.length; i++) {
					let str = `<div class="profileList" planner-idx="\${data[i].plannerIdx}" user-idx="\${data[i].userIdx}">
					              <img src="${contextPath}/resources/img/${data[i].profile}" class="partner-profile" />
					              <span class="nickname">\${data[i].nickname}</span>
					              <span class="delete"><button class="partner-delete-btn">삭제</button></span>
				              </div>`;
				    $("#partner-Profile-list").append(str);
				}
			})
			.catch(function(error) {
				alert("error");
			});
		}
		
// 동행인 삭제 처리 ----------------------------------------------------------------------------
		function deletePartner(button) {
			const profile = $(button).closest(".profileList");
			const userIdx = profile.attr("user-idx");
			const plannerIdx = profile.attr("planner-idx");

			fetch("deletePartner", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify({ plannerIdx, userIdx })
			})
			.then(res => res.text())
			.then(msg => {
				if(msg === "success") {
					alert("삭제 완료");
					loadPartnerList();
				} else {
					alert("삭제 실패");
				}
			})
			.catch(function(error) {
				alert("서버 오류 발생");
			});
		}
	});
</script>